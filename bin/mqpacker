#!/usr/bin/env node

'use strict';

var mqpacker = require('../index');
var fs = require('fs');
var minimist = require('minimist');
var pkg = require('../package.json');

var showHelp = function () {
  console.log('Usage: mqpacker [options] INPUT [OUTPUT]');
  console.log('');
  console.log('Description:');
  console.log('  ' + pkg.description);
  console.log('');
  console.log('Options:');
  console.log('  -s, --sort       Sort `min-width` queries.');
  console.log('      --sourcemap  Create source map file.');
  console.log('  -h, --help       Show this message.');
  console.log('  -v, --version    Print version information.');
  console.log('');
  console.log('Use a single dash for INPUT to read CSS from standard input.');

  return;
};
var pack = function (s, o) {
  mqpacker(o.mqpacker).pack(s, o.postcss).then(function (result) {
    if (!o.postcss.to) {
      process.stdout.write(result.css);

      return;
    }

    fs.writeFileSync(o.postcss.to, result.css);

    if (result.map) {
      fs.writeFileSync(o.postcss.to + '.map', result.map);
    }
  }, function (error) {
    console.error([
      error.file,
      error.line,
      error.column,
      ' ' + error.reason
    ].join(':'));
    process.exit(1);
  });
};
var argv = minimist(process.argv.slice(2), {
  boolean: [
    'help',
    'sort',
    'sourcemap',
    'version'
  ],
  alias: {
    'h': 'help',
    's': 'sort',
    'v': 'version'
  },
  default: {
    'help': false,
    'sourcemap': false,
    'sort': false,
    'version': false
  }
});

if (argv._.length < 1) {
  argv.help = true;
}

switch (true) {
  case argv.version:
    console.log('mqpacker v' + pkg.version);

    break;

  case argv.help:
    showHelp();

    break;

  default:
    var options = {
      mqpacker: {},
      postcss: {}
    };

    if (argv.sort) {
      options.mqpacker.sort = true;
    }

    if (argv.sourcemap) {
      options.postcss.map = true;
    }

    options.postcss.from = argv._[0];

    if (argv._[1]) {
      options.postcss.to = argv._[1];
    }

    if (options.postcss.map && options.postcss.to) {
      options.postcss.map = {
        inline: false
      };
    }

    var css = '';

    if (options.postcss.from !== '-') {
      css = fs.readFileSync(options.postcss.from, 'utf8');
      pack(css, options);
    } else {
      delete options.postcss.from;
      var stdin = process.openStdin();
      stdin.setEncoding('utf-8');
      stdin.on('data', function (chunk) {
        css += chunk;
      });
      stdin.on('end', function () {
        pack(css, options);
      });
    }
}
